CC = @CC@
FC = @FC@
NVCC = nvcc
HAVE_CUDA = @HAVE_CUDA@
HAVE_OPENMP = @HAVE_OPENMP@
HAVE_PAPI = @HAVE_PAPI@
FFTW_LDLIBS = @FFTW_LDLIBS@
FFTW_INCLUDES = @FFTW_INCLUDES@
FFTW_LDFLAGS= @FFTW_LDFLAGS@

SPIRAL_ARCH=AVX
SPIRAL_COMMON_FOLDER=lib/spiral-generated/common
SPIRAL_FOLDER_RELATIVE=spiral-generated/$(SPIRAL_ARCH)
SPIRAL_FOLDER=lib/$(SPIRAL_FOLDER_RELATIVE)

COMMON_FLAGS = -Wall -pedantic -O3 -mavx -fPIC -D_POSIX_C_SOURCE=199309L $(FFTW_INCLUDES) -Iinclude \
	       -I$(SPIRAL_COMMON_FOLDER) -I$(SPIRAL_FOLDER)

#Install prefixes
prefix=@prefix@
exec_prefix=@exec_prefix@

ifeq ($(HAVE_OPENMP), 1)
OPENMP_CFLAGS = @OPENMP_CFLAGS@
COMMON_FLAGS += $(OPENMP_CFLAGS)
endif

ifeq ($(HAVE_PAPI), 1)
PAPI_BIN = bin/papi_analysis
PAPI_CFLAGS = @PAPI_CFLAGS@
COMMON_FLAGS += $(PAPI_CFLAGS)
PAPI_LDFLAGS = @PAPI_LDFLAGS@
PAPI_LDLIBS = @PAPI_LDLIBS@
endif

CFLAGS = $(COMMON_FLAGS)
FFLAGS = $(COMMON_FLAGS)
LINKER = $(CC)

TINTL_INCLUDE=include/tintl
LIB_SOURCES = allocation.c common.c interpolate.c naive.c padding_aware.c \
	      phase_shift.c plan_cache.c timer.c spiral_table_packed.c \
	      spiral_table_split.c phase_shift_spiral.c \
	      $(patsubst lib/%, %, $(wildcard ${SPIRAL_FOLDER}/*/*.c))

LIB_LDFLAGS_LINKER =
LIB_LDFLAGS_COMPILER = -fPIC $(OPENMP_CFLAGS) $(FFTW_LDFLAGS)
LIB_LDLIBS = -lrt $(FFTW_LDLIBS)

BIN_LDFLAGS_LINKER = -rpath=../lib -rpath=./lib
BIN_LDFLAGS_COMPILER = -Llib $(OPENMP_CFLAGS) $(PAPI_LDFLAGS)
BIN_LDLIBS = -ltintl -lm $(PAPI_LDLIBS)

ifeq ($(HAVE_CUDA), yes)

LIB_SOURCES += naive_cuda.cu padding_aware_cuda.cu common_cuda.cu

FILTERED_CFLAGS := $(CFLAGS)
FILTERED_CFLAGS := $(FILTERED_CFLAGS:-Wall=)
FILTERED_CFLAGS := $(FILTERED_CFLAGS:-pedantic=)
NVCCFLAGS := $(FILTERED_CFLAGS:%=-Xcompiler %) -arch=compute_13 -code=compute_13,sm_13,sm_20

LIB_LDFLAGS_LINKER := $(LIB_LDFLAGS_LINKER:%=-Xlinker %)
LIB_LDFLAGS_COMPILER := $(LIB_LDFLAGS_COMPILER:%=-Xcompiler %)
LIB_LDLIBS += -lcudart -lcufft

BIN_LDFLAGS_LINKER := $(BIN_LDFLAGS_LINKER:%=-Xlinker %)
BIN_LDFLAGS_COMPILER := $(BIN_LDFLAGS_COMPILER:%=-Xcompiler %)
LINKER = $(NVCC)

else

LIB_SOURCES += cuda_stubs.c
LIB_LDFLAGS_LINKER := $(LIB_LDFLAGS_LINKER:%=-Wl,%)
BIN_LDFLAGS_LINKER := $(BIN_LDFLAGS_LINKER:%=-Wl,%)

endif

BIN_LDFLAGS = $(BIN_LDFLAGS_COMPILER) $(BIN_LDFLAGS_LINKER)
LIB_LDFLAGS = $(LIB_LDFLAGS_COMPILER) $(LIB_LDFLAGS_LINKER)

LIB_OBJECTS = $(patsubst %.cu, lib/omp/%.o, $(patsubst %.c, lib/omp/%.o, $(LIB_SOURCES)))

default: lib/libtintl.so bin/benchmark $(PAPI_BIN)

ifeq ($(HAVE_OPENMP), 1)
lib/libtintl.so: $(LIB_OBJECTS)
	$(LINKER) -shared $(LIB_LDFLAGS) $^ -o $@ $(LIB_LDLIBS)
else
lib/libtintl.so: $(LIB_OBJECTS)
	$(LINKER) -shared $(LIB_LDFLAGS) $^ -o $@ $(LIB_LDLIBS)
endif

bin/benchmark: bin/storage.o

bin/papi_analysis: bin/papi_analysis.o bin/papi_multiplex.o bin/storage.o

bin/benchmark.o: $(TINTL_INCLUDE)/timer.h $(TINTL_INCLUDE)/allocation.h $(TINTL_INCLUDE)/interpolate.h \
  $(TINTL_INCLUDE)/phase_shift.h $(TINTL_INCLUDE)/naive.h $(TINTL_INCLUDE)/padding_aware.h \
  $(TINTL_INCLUDE)/naive_cuda.h $(TINTL_INCLUDE)/padding_aware_cuda.h bin/storage.h \
  $(TINTL_INCLUDE)/phase_shift_spiral.h

bin/papi_analysis.o: $(TINTL_INCLUDE)/naive.h $(TINTL_INCLUDE)/padding_aware.h \
  $(TINTL_INCLUDE)/phase_shift.h bin/storage.h bin/papi_multiplex.h

bin/storage.o: bin/storage.h

bin/papi_multiplex.o: bin/papi_multiplex.h

bin/%: bin/%.o lib/libtintl.so
	$(LINKER) $(BIN_LDFLAGS) $^ -o $@ $(BIN_LDLIBS)

lib/st/%.o: lib/%.c
	mkdir -p $(patsubst lib/%, lib/st/%, $(wildcard ${SPIRAL_FOLDER}/*))
	$(CC) -c $(CFLAGS) $< -o $@

lib/omp/%.o: lib/%.c
	mkdir -p $(patsubst lib/%, lib/omp/%, $(wildcard ${SPIRAL_FOLDER}/*))
	$(CC) -c $(CFLAGS) $< -o $@

lib/st/%.o: lib/%.cu
	mkdir -p lib/st
	$(NVCC) $(NVCCFLAGS) -c $< -o $@

lib/omp/%.o: lib/%.cu
	mkdir -p lib/omp
	$(NVCC) $(NVCCFLAGS) -c $< -o $@

lib/%/allocation.o: $(TINTL_INCLUDE)/allocation.h

lib/%/common.o: lib/common.h

lib/%/common_cuda.o: lib/common_cuda.h

lib/%/interpolate.o: $(TINTL_INCLUDE)/timer.h $(TINTL_INCLUDE)/interpolate.h lib/common.h

lib/%/naive.o: $(TINTL_INCLUDE)/interpolate.h $(TINTL_INCLUDE)/naive.h $(TINTL_INCLUDE)/timer.h \
  $(TINTL_INCLUDE)/allocation.h lib/common.h $(TINTL_INCLUDE)/fftw_cycle.h lib/fftw_utility.h

lib/%/naive_cuda.o: $(TINTL_INCLUDE)/interpolate.h $(TINTL_INCLUDE)/naive_cuda.h lib/common.h \
  $(TINTL_INCLUDE)/allocation.h lib/common_cuda.h

lib/%/padding_aware_cuda.o: $(TINTL_INCLUDE)/interpolate.h $(TINTL_INCLUDE)/padding_aware_cuda.h lib/common.h \
  $(TINTL_INCLUDE)/allocation.h lib/common_cuda.h

lib/%/padding_aware.o: $(TINTL_INCLUDE)/interpolate.h $(TINTL_INCLUDE)/padding_aware.h $(TINTL_INCLUDE)/timer.h \
  $(TINTL_INCLUDE)/allocation.h lib/common.h $(TINTL_INCLUDE)/fftw_cycle.h lib/fftw_utility.h

lib/%/phase_shift.c: $(TINTL_INCLUDE)/interpolate.h $(TINTL_INCLUDE)/phase_shift.h $(TINTL_INCLUDE)/timer.h \
  $(TINTL_INCLUDE)/allocation.h $(TINTL_INCLUDE)/fftw_cycle.h lib/common.h lib/fftw_utility.h

lib/%/phase_shift_spiral.c: $(TINTL_INCLUDE)/interpolate.h $(TINTL_INCLUDE)/phase_shift_spiral.h $(TINTL_INCLUDE)/timer.h \
  $(TINTL_INCLUDE)/allocation.h lib/common.h

lib/%/plan_cache.o: lib/plan_cache.h

lib/%/timer.o: $(TINTL_INCLUDE)/timer.h

install: lib/libtintl.so
	install -d @libdir@
	install -m 755 lib/libtintl.so -t @libdir@
	install -d @includedir@/tintl
	install -m 644 $(wildcard include/tintl/*.h) -t @includedir@/tintl

lib/spiral_table_packed.c: scripts/generate_spiral_function_table $(wildcard $(SPIRAL_FOLDER)/*/*.h)
	TINTL_ROOT=$$(pwd) &&\
	cd $(SPIRAL_FOLDER) &&\
	$${TINTL_ROOT}/scripts/generate_spiral_function_table . packed > $${TINTL_ROOT}/$@

lib/spiral_table_split.c: scripts/generate_spiral_function_table $(wildcard $(SPIRAL_FOLDER)/*/*.h)
	TINTL_ROOT=$$(pwd) &&\
	cd $(SPIRAL_FOLDER) &&\
	$${TINTL_ROOT}/scripts/generate_spiral_function_table . split > $${TINTL_ROOT}/$@

lib/spiral_table_packed.o: lib/spiral_table_packed.h $(SPIRAL_FOLDER)/*/*.c $(SPIRAL_FOLDER)/*/*.h

lib/spiral_table_split.o: lib/spiral_table_split.h $(SPIRAL_FOLDER)/*/*.c $(SPIRAL_FOLDER)/*/*.h

clean:
	rm -rf lib/st lib/omp
	rm -f lib/*.o lib/*.so bin/*.o bin/benchmark bin/papi_analysis bin/*.o lib/spiral_table_packed.c lib/spiral_table_split.c

.PHONY: default clean install
