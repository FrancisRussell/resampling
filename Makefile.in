CC = @CC@
FC = @FC@
NVCC = nvcc
HAVE_CUDA = @HAVE_CUDA@
HAVE_OPENMP = @HAVE_OPENMP@
FFTW_LDLIBS = @FFTW_LDLIBS@
FFTW_INCLUDES = @FFTW_INCLUDES@
FFTW_LDFLAGS= @FFTW_LDFLAGS@
COMMON_FLAGS = -Wall -pedantic -O3 -fPIC $(FFTW_INCLUDES) -Iinclude

ifeq ($(HAVE_OPENMP), 1)
OPENMP_CFLAGS = @OPENMP_CFLAGS@
COMMON_FLAGS += $(OPENMP_CFLAGS)
endif

CFLAGS = $(COMMON_FLAGS)
FFLAGS = $(COMMON_FLAGS)
LINKER = $(CC)

LIB_SOURCES = allocation.c common.c interpolate.c naive.c padding_aware.c \
	      phase_shift.c plan_cache.c timer.c

LIB_LDFLAGS_LINKER =
LIB_LDFLAGS_COMPILER = -fPIC $(OPENMP_CFLAGS) $(FFTW_LDFLAGS)
LIB_LDLIBS = $(FFTW_LDLIBS)

BIN_LDFLAGS_LINKER = -rpath=../lib -rpath=./lib
BIN_LDFLAGS_COMPILER = -Llib
BIN_LDLIBS = -lresample -lm

ifeq ($(HAVE_CUDA), yes)

LIB_SOURCES += naive_cuda.cu padding_aware_cuda.cu common_cuda.cu

FILTERED_CFLAGS := $(CFLAGS)
FILTERED_CFLAGS := $(FILTERED_CFLAGS:-Wall=)
FILTERED_CFLAGS := $(FILTERED_CFLAGS:-pedantic=)
NVCCFLAGS := $(FILTERED_CFLAGS:%=-Xcompiler %) -arch=compute_13 -code=compute_13,sm_13,sm_20

LIB_LDFLAGS_LINKER := $(LIB_LDFLAGS_LINKER:%=-Xlinker %)
LIB_LDFLAGS_COMPILER := $(LIB_LDFLAGS_COMPILER:%=-Xcompiler %)
LIB_LDLIBS += -lcudart -lcufft

BIN_LDFLAGS_LINKER := $(BIN_LDFLAGS_LINKER:%=-Xlinker %)
BIN_LDFLAGS_COMPILER := $(BIN_LDFLAGS_COMPILER:%=-Xcompiler %)
LINKER = $(NVCC)

else

LIB_SOURCES += cuda_stubs.c
LIB_LDFLAGS_LINKER := $(LIB_LDFLAGS_LINKER:%=-Wl,%)
BIN_LDFLAGS_LINKER := $(BIN_LDFLAGS_LINKER:%=-Wl,%)

endif

BIN_LDFLAGS = $(BIN_LDFLAGS_COMPILER) $(BIN_LDFLAGS_LINKER)
LIB_LDFLAGS = $(LIB_LDFLAGS_COMPILER) $(LIB_LDFLAGS_LINKER)

LIB_OBJECTS = $(patsubst %.cu, lib/omp/%.o, $(patsubst %.c, lib/omp/%.o, $(LIB_SOURCES)))

default: lib/libresample.so bin/benchmark

bin/benchmark.o: include/timer.h include/allocation.h include/interpolate.h \
  include/phase_shift.h include/naive.h include/padding_aware.h \
  include/naive_cuda.h include/padding_aware_cuda.h

ifeq ($(HAVE_OPENMP), 1)
lib/libresample.so: $(LIB_OBJECTS)
	$(LINKER) -shared $(LIB_LDFLAGS) $^ -o $@ $(LIB_LDLIBS)
else
lib/libresample.so: $(LIB_OBJECTS)
	$(LINKER) -shared $(LIB_LDFLAGS) $^ -o $@ $(LIB_LDLIBS)
endif

bin/%: bin/%.o lib/libresample.so
	$(LINKER) $(BIN_LDFLAGS) $< -o $@ $(BIN_LDLIBS)

lib/st/%.o: lib/%.c
	mkdir -p lib/st
	$(CC) -c $(CFLAGS) $< -o $@

lib/omp/%.o: lib/%.c
	mkdir -p lib/omp
	$(CC) -c $(CFLAGS) $< -o $@

lib/st/%.o: lib/%.cu
	mkdir -p lib/st
	$(NVCC) $(NVCCFLAGS) -c $< -o $@

lib/omp/%.o: lib/%.cu
	mkdir -p lib/omp
	$(NVCC) $(NVCCFLAGS) -c $< -o $@

lib/%/allocation.o: include/allocation.h

lib/%/common.o: lib/common.h

lib/%/common_cuda.o: lib/common_cuda.h

lib/%/interpolate.o: include/timer.h include/interpolate.h

lib/%/naive.o: include/interpolate.h include/naive.h include/timer.h \
  include/allocation.h lib/common.h include/fftw_cycle.h lib/fftw_utility.h

lib/%/naive_cuda.o: include/interpolate.h include/naive_cuda.h lib/common.h \
  include/allocation.h lib/common_cuda.h

lib/%/padding_aware_cuda.o: include/interpolate.h include/padding_aware_cuda.h lib/common.h \
  include/allocation.h lib/common_cuda.h

lib/%/padding_aware.o: include/interpolate.h include/padding_aware.h include/timer.h \
  include/allocation.h lib/common.h include/fftw_cycle.h lib/fftw_utility.h

lib/%/phase_shift.c: include/interpolate.h include/phase_shift.h include/timer.h \
  include/allocation.h include/fftw_cycle.h lib/common.h lib/fftw_utility.h

lib/%/plan_cache.o: lib/plan_cache.h

lib/%/timer.o: include/timer.h

clean:
	rm -rf lib/st lib/omp
	rm -f lib/*.o lib/*.so bin/*.o bin/benchmark

.PHONY: default clean
